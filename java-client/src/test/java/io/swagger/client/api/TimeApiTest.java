/*
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Time;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeApi
 */
@Ignore
public class TimeApiTest {

    private final TimeApi api = new TimeApi();

    
    /**
     * 
     *
     * Time by map id. Sorted in ascending order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeMapMapIdGetTest() throws ApiException {
        Integer mapId = null;
        Integer style = null;
        Integer page = null;
        List<Time> response = api.timeMapMapIdGet(mapId, style, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get WR of map.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeMapMapIdWrGetTest() throws ApiException {
        Integer mapId = null;
        Integer style = null;
        Time response = api.timeMapMapIdWrGet(mapId, style);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 50 recent times.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeRecentGetTest() throws ApiException {
        Integer date = null;
        Integer style = null;
        Integer game = null;
        Integer map = null;
        List<Time> response = api.timeRecentGet(date, style, game, map);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 10 recent world records.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeRecentWrGetTest() throws ApiException {
        Integer style = null;
        Integer game = null;
        Boolean whitelist = null;
        List<Time> response = api.timeRecentWrGet(style, game, whitelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Time from id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeTimeIdGetTest() throws ApiException {
        Integer timeId = null;
        Time response = api.timeTimeIdGet(timeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Time rank from id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeTimeIdRankGetTest() throws ApiException {
        Integer timeId = null;
        Object response = api.timeTimeIdRankGet(timeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Time by user id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeUserUserIdGetTest() throws ApiException {
        Integer userId = null;
        Integer map = null;
        Integer style = null;
        Integer game = null;
        Integer page = null;
        List<Time> response = api.timeUserUserIdGet(userId, map, style, game, page);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * World records by user id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void timeUserUserIdWrGetTest() throws ApiException {
        Integer userId = null;
        Integer game = null;
        Integer style = null;
        List<Time> response = api.timeUserUserIdWrGet(userId, game, style);

        // TODO: test validations
    }
    
}
