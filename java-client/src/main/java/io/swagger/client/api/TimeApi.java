/*
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Time;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimeApi {
    private ApiClient apiClient;

    public TimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for timeMapMapIdGet
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeMapMapIdGetCall(Integer mapId, Integer style, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/map/{mapId}"
            .replaceAll("\\{" + "mapId" + "\\}", apiClient.escapeString(mapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeMapMapIdGetValidateBeforeCall(Integer mapId, Integer style, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling timeMapMapIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeMapMapIdGetCall(mapId, style, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Time by map id. Sorted in ascending order.
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @return List&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Time> timeMapMapIdGet(Integer mapId, Integer style, Integer page) throws ApiException {
        ApiResponse<List<Time>> resp = timeMapMapIdGetWithHttpInfo(mapId, style, page);
        return resp.getData();
    }

    /**
     * 
     * Time by map id. Sorted in ascending order.
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @return ApiResponse&lt;List&lt;Time&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Time>> timeMapMapIdGetWithHttpInfo(Integer mapId, Integer style, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = timeMapMapIdGetValidateBeforeCall(mapId, style, page, null, null);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Time by map id. Sorted in ascending order.
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeMapMapIdGetAsync(Integer mapId, Integer style, Integer page, final ApiCallback<List<Time>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeMapMapIdGetValidateBeforeCall(mapId, style, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeMapMapIdWrGet
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeMapMapIdWrGetCall(Integer mapId, Integer style, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/map/{mapId}/wr"
            .replaceAll("\\{" + "mapId" + "\\}", apiClient.escapeString(mapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeMapMapIdWrGetValidateBeforeCall(Integer mapId, Integer style, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mapId' is set
        if (mapId == null) {
            throw new ApiException("Missing the required parameter 'mapId' when calling timeMapMapIdWrGet(Async)");
        }
        
        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling timeMapMapIdWrGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeMapMapIdWrGetCall(mapId, style, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get WR of map.
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (required)
     * @return Time
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Time timeMapMapIdWrGet(Integer mapId, Integer style) throws ApiException {
        ApiResponse<Time> resp = timeMapMapIdWrGetWithHttpInfo(mapId, style);
        return resp.getData();
    }

    /**
     * 
     * Get WR of map.
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (required)
     * @return ApiResponse&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Time> timeMapMapIdWrGetWithHttpInfo(Integer mapId, Integer style) throws ApiException {
        com.squareup.okhttp.Call call = timeMapMapIdWrGetValidateBeforeCall(mapId, style, null, null);
        Type localVarReturnType = new TypeToken<Time>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get WR of map.
     * @param mapId Map ID filter (required)
     * @param style Style ID filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeMapMapIdWrGetAsync(Integer mapId, Integer style, final ApiCallback<Time> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeMapMapIdWrGetValidateBeforeCall(mapId, style, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Time>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeRecentGet
     * @param date Filter out all times before unix time stamp. (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param map Map ID filter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeRecentGetCall(Integer date, Integer style, Integer game, Integer map, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));
        if (game != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game", game));
        if (map != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("map", map));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeRecentGetValidateBeforeCall(Integer date, Integer style, Integer game, Integer map, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = timeRecentGetCall(date, style, game, map, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 50 recent times.
     * @param date Filter out all times before unix time stamp. (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param map Map ID filter (optional)
     * @return List&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Time> timeRecentGet(Integer date, Integer style, Integer game, Integer map) throws ApiException {
        ApiResponse<List<Time>> resp = timeRecentGetWithHttpInfo(date, style, game, map);
        return resp.getData();
    }

    /**
     * 
     * 50 recent times.
     * @param date Filter out all times before unix time stamp. (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param map Map ID filter (optional)
     * @return ApiResponse&lt;List&lt;Time&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Time>> timeRecentGetWithHttpInfo(Integer date, Integer style, Integer game, Integer map) throws ApiException {
        com.squareup.okhttp.Call call = timeRecentGetValidateBeforeCall(date, style, game, map, null, null);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 50 recent times.
     * @param date Filter out all times before unix time stamp. (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param map Map ID filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeRecentGetAsync(Integer date, Integer style, Integer game, Integer map, final ApiCallback<List<Time>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeRecentGetValidateBeforeCall(date, style, game, map, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeRecentWrGet
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param whitelist Filters for only players on the whitelist (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeRecentWrGetCall(Integer style, Integer game, Boolean whitelist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/recent/wr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));
        if (game != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game", game));
        if (whitelist != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whitelist", whitelist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeRecentWrGetValidateBeforeCall(Integer style, Integer game, Boolean whitelist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling timeRecentWrGet(Async)");
        }
        
        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling timeRecentWrGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeRecentWrGetCall(style, game, whitelist, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 10 recent world records.
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param whitelist Filters for only players on the whitelist (optional)
     * @return List&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Time> timeRecentWrGet(Integer style, Integer game, Boolean whitelist) throws ApiException {
        ApiResponse<List<Time>> resp = timeRecentWrGetWithHttpInfo(style, game, whitelist);
        return resp.getData();
    }

    /**
     * 
     * 10 recent world records.
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param whitelist Filters for only players on the whitelist (optional)
     * @return ApiResponse&lt;List&lt;Time&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Time>> timeRecentWrGetWithHttpInfo(Integer style, Integer game, Boolean whitelist) throws ApiException {
        com.squareup.okhttp.Call call = timeRecentWrGetValidateBeforeCall(style, game, whitelist, null, null);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 10 recent world records.
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param whitelist Filters for only players on the whitelist (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeRecentWrGetAsync(Integer style, Integer game, Boolean whitelist, final ApiCallback<List<Time>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeRecentWrGetValidateBeforeCall(style, game, whitelist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeTimeIdGet
     * @param timeId Time ID filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeTimeIdGetCall(Integer timeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/{timeId}"
            .replaceAll("\\{" + "timeId" + "\\}", apiClient.escapeString(timeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeTimeIdGetValidateBeforeCall(Integer timeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'timeId' is set
        if (timeId == null) {
            throw new ApiException("Missing the required parameter 'timeId' when calling timeTimeIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeTimeIdGetCall(timeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Time from id.
     * @param timeId Time ID filter (required)
     * @return Time
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Time timeTimeIdGet(Integer timeId) throws ApiException {
        ApiResponse<Time> resp = timeTimeIdGetWithHttpInfo(timeId);
        return resp.getData();
    }

    /**
     * 
     * Time from id.
     * @param timeId Time ID filter (required)
     * @return ApiResponse&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Time> timeTimeIdGetWithHttpInfo(Integer timeId) throws ApiException {
        com.squareup.okhttp.Call call = timeTimeIdGetValidateBeforeCall(timeId, null, null);
        Type localVarReturnType = new TypeToken<Time>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Time from id.
     * @param timeId Time ID filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeTimeIdGetAsync(Integer timeId, final ApiCallback<Time> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeTimeIdGetValidateBeforeCall(timeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Time>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeTimeIdRankGet
     * @param timeId Time ID filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeTimeIdRankGetCall(Integer timeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/{timeId}/rank"
            .replaceAll("\\{" + "timeId" + "\\}", apiClient.escapeString(timeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeTimeIdRankGetValidateBeforeCall(Integer timeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'timeId' is set
        if (timeId == null) {
            throw new ApiException("Missing the required parameter 'timeId' when calling timeTimeIdRankGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeTimeIdRankGetCall(timeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Time rank from id.
     * @param timeId Time ID filter (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object timeTimeIdRankGet(Integer timeId) throws ApiException {
        ApiResponse<Object> resp = timeTimeIdRankGetWithHttpInfo(timeId);
        return resp.getData();
    }

    /**
     * 
     * Time rank from id.
     * @param timeId Time ID filter (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> timeTimeIdRankGetWithHttpInfo(Integer timeId) throws ApiException {
        com.squareup.okhttp.Call call = timeTimeIdRankGetValidateBeforeCall(timeId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Time rank from id.
     * @param timeId Time ID filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeTimeIdRankGetAsync(Integer timeId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeTimeIdRankGetValidateBeforeCall(timeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeUserUserIdGet
     * @param userId User ID filter (required)
     * @param map Map ID filter (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeUserUserIdGetCall(Integer userId, Integer map, Integer style, Integer game, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (map != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("map", map));
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));
        if (game != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game", game));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeUserUserIdGetValidateBeforeCall(Integer userId, Integer map, Integer style, Integer game, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling timeUserUserIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeUserUserIdGetCall(userId, map, style, game, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Time by user id.
     * @param userId User ID filter (required)
     * @param map Map ID filter (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @return List&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Time> timeUserUserIdGet(Integer userId, Integer map, Integer style, Integer game, Integer page) throws ApiException {
        ApiResponse<List<Time>> resp = timeUserUserIdGetWithHttpInfo(userId, map, style, game, page);
        return resp.getData();
    }

    /**
     * 
     * Time by user id.
     * @param userId User ID filter (required)
     * @param map Map ID filter (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @return ApiResponse&lt;List&lt;Time&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Time>> timeUserUserIdGetWithHttpInfo(Integer userId, Integer map, Integer style, Integer game, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = timeUserUserIdGetValidateBeforeCall(userId, map, style, game, page, null, null);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Time by user id.
     * @param userId User ID filter (required)
     * @param map Map ID filter (optional)
     * @param style Style ID filter (optional)
     * @param game Game ID filter (optional)
     * @param page Page api results. Page size is 200. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeUserUserIdGetAsync(Integer userId, Integer map, Integer style, Integer game, Integer page, final ApiCallback<List<Time>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeUserUserIdGetValidateBeforeCall(userId, map, style, game, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeUserUserIdWrGet
     * @param userId User ID filter (required)
     * @param game Game ID filter (required)
     * @param style Style ID filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call timeUserUserIdWrGetCall(Integer userId, Integer game, Integer style, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/user/{userId}/wr"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (game != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game", game));
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeUserUserIdWrGetValidateBeforeCall(Integer userId, Integer game, Integer style, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling timeUserUserIdWrGet(Async)");
        }
        
        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling timeUserUserIdWrGet(Async)");
        }
        
        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling timeUserUserIdWrGet(Async)");
        }
        

        com.squareup.okhttp.Call call = timeUserUserIdWrGetCall(userId, game, style, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * World records by user id.
     * @param userId User ID filter (required)
     * @param game Game ID filter (required)
     * @param style Style ID filter (required)
     * @return List&lt;Time&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Time> timeUserUserIdWrGet(Integer userId, Integer game, Integer style) throws ApiException {
        ApiResponse<List<Time>> resp = timeUserUserIdWrGetWithHttpInfo(userId, game, style);
        return resp.getData();
    }

    /**
     * 
     * World records by user id.
     * @param userId User ID filter (required)
     * @param game Game ID filter (required)
     * @param style Style ID filter (required)
     * @return ApiResponse&lt;List&lt;Time&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Time>> timeUserUserIdWrGetWithHttpInfo(Integer userId, Integer game, Integer style) throws ApiException {
        com.squareup.okhttp.Call call = timeUserUserIdWrGetValidateBeforeCall(userId, game, style, null, null);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * World records by user id.
     * @param userId User ID filter (required)
     * @param game Game ID filter (required)
     * @param style Style ID filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call timeUserUserIdWrGetAsync(Integer userId, Integer game, Integer style, final ApiCallback<List<Time>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeUserUserIdWrGetValidateBeforeCall(userId, game, style, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Time>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
