/*
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Rank;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RankApi {
    private ApiClient apiClient;

    public RankApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RankApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for rankGet
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param page Page api results, Page size is 50. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rankGetCall(Integer style, Integer game, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));
        if (game != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game", game));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rankGetValidateBeforeCall(Integer style, Integer game, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling rankGet(Async)");
        }
        
        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling rankGet(Async)");
        }
        

        com.squareup.okhttp.Call call = rankGetCall(style, game, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Top ranked players, paged at 50 per page.
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param page Page api results, Page size is 50. (optional)
     * @return List&lt;Rank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Rank> rankGet(Integer style, Integer game, Integer page) throws ApiException {
        ApiResponse<List<Rank>> resp = rankGetWithHttpInfo(style, game, page);
        return resp.getData();
    }

    /**
     * 
     * Top ranked players, paged at 50 per page.
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param page Page api results, Page size is 50. (optional)
     * @return ApiResponse&lt;List&lt;Rank&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Rank>> rankGetWithHttpInfo(Integer style, Integer game, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = rankGetValidateBeforeCall(style, game, page, null, null);
        Type localVarReturnType = new TypeToken<List<Rank>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Top ranked players, paged at 50 per page.
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param page Page api results, Page size is 50. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rankGetAsync(Integer style, Integer game, Integer page, final ApiCallback<List<Rank>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rankGetValidateBeforeCall(style, game, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Rank>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rankUserIdGet
     * @param userId User ID filter (required)
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rankUserIdGetCall(Integer userId, Integer style, Integer game, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rank/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));
        if (game != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game", game));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rankUserIdGetValidateBeforeCall(Integer userId, Integer style, Integer game, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling rankUserIdGet(Async)");
        }
        
        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling rankUserIdGet(Async)");
        }
        
        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling rankUserIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = rankUserIdGetCall(userId, style, game, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get rank of user by their id.
     * @param userId User ID filter (required)
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @return Rank
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rank rankUserIdGet(Integer userId, Integer style, Integer game) throws ApiException {
        ApiResponse<Rank> resp = rankUserIdGetWithHttpInfo(userId, style, game);
        return resp.getData();
    }

    /**
     * 
     * Get rank of user by their id.
     * @param userId User ID filter (required)
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @return ApiResponse&lt;Rank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rank> rankUserIdGetWithHttpInfo(Integer userId, Integer style, Integer game) throws ApiException {
        com.squareup.okhttp.Call call = rankUserIdGetValidateBeforeCall(userId, style, game, null, null);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get rank of user by their id.
     * @param userId User ID filter (required)
     * @param style Style ID filter (required)
     * @param game Game ID filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rankUserIdGetAsync(Integer userId, Integer style, Integer game, final ApiCallback<Rank> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rankUserIdGetValidateBeforeCall(userId, style, game, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rank>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
