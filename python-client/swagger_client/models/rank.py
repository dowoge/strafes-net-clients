# coding: utf-8

"""
    StrafesNET Public API

    ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Rank(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user': 'int',
        'style': 'int',
        'mode': 'int',
        'game': 'int',
        'rank': 'float',
        'skill': 'float',
        'placement': 'int'
    }

    attribute_map = {
        'id': 'ID',
        'user': 'User',
        'style': 'Style',
        'mode': 'Mode',
        'game': 'Game',
        'rank': 'Rank',
        'skill': 'Skill',
        'placement': 'Placement'
    }

    def __init__(self, id=None, user=None, style=None, mode=None, game=None, rank=None, skill=None, placement=None, _configuration=None):  # noqa: E501
        """Rank - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user = None
        self._style = None
        self._mode = None
        self._game = None
        self._rank = None
        self._skill = None
        self._placement = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user is not None:
            self.user = user
        if style is not None:
            self.style = style
        if mode is not None:
            self.mode = mode
        if game is not None:
            self.game = game
        if rank is not None:
            self.rank = rank
        if skill is not None:
            self.skill = skill
        if placement is not None:
            self.placement = placement

    @property
    def id(self):
        """Gets the id of this Rank.  # noqa: E501


        :return: The id of this Rank.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rank.


        :param id: The id of this Rank.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this Rank.  # noqa: E501


        :return: The user of this Rank.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Rank.


        :param user: The user of this Rank.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def style(self):
        """Gets the style of this Rank.  # noqa: E501


        :return: The style of this Rank.  # noqa: E501
        :rtype: int
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Rank.


        :param style: The style of this Rank.  # noqa: E501
        :type: int
        """

        self._style = style

    @property
    def mode(self):
        """Gets the mode of this Rank.  # noqa: E501


        :return: The mode of this Rank.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Rank.


        :param mode: The mode of this Rank.  # noqa: E501
        :type: int
        """

        self._mode = mode

    @property
    def game(self):
        """Gets the game of this Rank.  # noqa: E501


        :return: The game of this Rank.  # noqa: E501
        :rtype: int
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Rank.


        :param game: The game of this Rank.  # noqa: E501
        :type: int
        """

        self._game = game

    @property
    def rank(self):
        """Gets the rank of this Rank.  # noqa: E501


        :return: The rank of this Rank.  # noqa: E501
        :rtype: float
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this Rank.


        :param rank: The rank of this Rank.  # noqa: E501
        :type: float
        """

        self._rank = rank

    @property
    def skill(self):
        """Gets the skill of this Rank.  # noqa: E501


        :return: The skill of this Rank.  # noqa: E501
        :rtype: float
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this Rank.


        :param skill: The skill of this Rank.  # noqa: E501
        :type: float
        """

        self._skill = skill

    @property
    def placement(self):
        """Gets the placement of this Rank.  # noqa: E501


        :return: The placement of this Rank.  # noqa: E501
        :rtype: int
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this Rank.


        :param placement: The placement of this Rank.  # noqa: E501
        :type: int
        """

        self._placement = placement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rank, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rank):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Rank):
            return True

        return self.to_dict() != other.to_dict()
