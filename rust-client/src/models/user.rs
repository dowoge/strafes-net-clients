/* 
 * StrafesNET Public API
 *
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct User {
  #[serde(rename = "ID")]
  ID: Option<i32>,
  #[serde(rename = "Username")]
  username: Option<String>,
  #[serde(rename = "State")]
  state: Option<i32>
}

impl User {
  pub fn new() -> User {
    User {
      ID: None,
      username: None,
      state: None
    }
  }

  pub fn set_ID(&mut self, ID: i32) {
    self.ID = Some(ID);
  }

  pub fn with_ID(mut self, ID: i32) -> User {
    self.ID = Some(ID);
    self
  }

  pub fn ID(&self) -> Option<&i32> {
    self.ID.as_ref()
  }

  pub fn reset_ID(&mut self) {
    self.ID = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> User {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

  pub fn set_state(&mut self, state: i32) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: i32) -> User {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&i32> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

}



