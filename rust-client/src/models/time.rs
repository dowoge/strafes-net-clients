/* 
 * StrafesNET Public API
 *
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Time : If a new time is made it will retain the previous time's id.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Time {
  #[serde(rename = "ID")]
  ID: Option<i32>,
  #[serde(rename = "Time")]
  time: Option<i32>,
  #[serde(rename = "User")]
  user: Option<i32>,
  #[serde(rename = "Map")]
  map: Option<i32>,
  #[serde(rename = "Date")]
  date: Option<i32>,
  #[serde(rename = "Style")]
  style: Option<i32>,
  #[serde(rename = "Mode")]
  mode: Option<i32>,
  #[serde(rename = "Game")]
  game: Option<i32>
}

impl Time {
  /// If a new time is made it will retain the previous time's id.
  pub fn new() -> Time {
    Time {
      ID: None,
      time: None,
      user: None,
      map: None,
      date: None,
      style: None,
      mode: None,
      game: None
    }
  }

  pub fn set_ID(&mut self, ID: i32) {
    self.ID = Some(ID);
  }

  pub fn with_ID(mut self, ID: i32) -> Time {
    self.ID = Some(ID);
    self
  }

  pub fn ID(&self) -> Option<&i32> {
    self.ID.as_ref()
  }

  pub fn reset_ID(&mut self) {
    self.ID = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> Time {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_user(&mut self, user: i32) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: i32) -> Time {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&i32> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_map(&mut self, map: i32) {
    self.map = Some(map);
  }

  pub fn with_map(mut self, map: i32) -> Time {
    self.map = Some(map);
    self
  }

  pub fn map(&self) -> Option<&i32> {
    self.map.as_ref()
  }

  pub fn reset_map(&mut self) {
    self.map = None;
  }

  pub fn set_date(&mut self, date: i32) {
    self.date = Some(date);
  }

  pub fn with_date(mut self, date: i32) -> Time {
    self.date = Some(date);
    self
  }

  pub fn date(&self) -> Option<&i32> {
    self.date.as_ref()
  }

  pub fn reset_date(&mut self) {
    self.date = None;
  }

  pub fn set_style(&mut self, style: i32) {
    self.style = Some(style);
  }

  pub fn with_style(mut self, style: i32) -> Time {
    self.style = Some(style);
    self
  }

  pub fn style(&self) -> Option<&i32> {
    self.style.as_ref()
  }

  pub fn reset_style(&mut self) {
    self.style = None;
  }

  pub fn set_mode(&mut self, mode: i32) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: i32) -> Time {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&i32> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_game(&mut self, game: i32) {
    self.game = Some(game);
  }

  pub fn with_game(mut self, game: i32) -> Time {
    self.game = Some(game);
    self
  }

  pub fn game(&self) -> Option<&i32> {
    self.game.as_ref()
  }

  pub fn reset_game(&mut self) {
    self.game = None;
  }

}



