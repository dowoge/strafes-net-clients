/* 
 * StrafesNET Public API
 *
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Rank {
  #[serde(rename = "ID")]
  ID: Option<i32>,
  #[serde(rename = "User")]
  user: Option<i32>,
  #[serde(rename = "Style")]
  style: Option<i32>,
  #[serde(rename = "Mode")]
  mode: Option<i32>,
  #[serde(rename = "Game")]
  game: Option<i32>,
  #[serde(rename = "Rank")]
  rank: Option<f32>,
  #[serde(rename = "Skill")]
  skill: Option<f32>,
  #[serde(rename = "Placement")]
  placement: Option<i32>
}

impl Rank {
  pub fn new() -> Rank {
    Rank {
      ID: None,
      user: None,
      style: None,
      mode: None,
      game: None,
      rank: None,
      skill: None,
      placement: None
    }
  }

  pub fn set_ID(&mut self, ID: i32) {
    self.ID = Some(ID);
  }

  pub fn with_ID(mut self, ID: i32) -> Rank {
    self.ID = Some(ID);
    self
  }

  pub fn ID(&self) -> Option<&i32> {
    self.ID.as_ref()
  }

  pub fn reset_ID(&mut self) {
    self.ID = None;
  }

  pub fn set_user(&mut self, user: i32) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: i32) -> Rank {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&i32> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_style(&mut self, style: i32) {
    self.style = Some(style);
  }

  pub fn with_style(mut self, style: i32) -> Rank {
    self.style = Some(style);
    self
  }

  pub fn style(&self) -> Option<&i32> {
    self.style.as_ref()
  }

  pub fn reset_style(&mut self) {
    self.style = None;
  }

  pub fn set_mode(&mut self, mode: i32) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: i32) -> Rank {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&i32> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_game(&mut self, game: i32) {
    self.game = Some(game);
  }

  pub fn with_game(mut self, game: i32) -> Rank {
    self.game = Some(game);
    self
  }

  pub fn game(&self) -> Option<&i32> {
    self.game.as_ref()
  }

  pub fn reset_game(&mut self) {
    self.game = None;
  }

  pub fn set_rank(&mut self, rank: f32) {
    self.rank = Some(rank);
  }

  pub fn with_rank(mut self, rank: f32) -> Rank {
    self.rank = Some(rank);
    self
  }

  pub fn rank(&self) -> Option<&f32> {
    self.rank.as_ref()
  }

  pub fn reset_rank(&mut self) {
    self.rank = None;
  }

  pub fn set_skill(&mut self, skill: f32) {
    self.skill = Some(skill);
  }

  pub fn with_skill(mut self, skill: f32) -> Rank {
    self.skill = Some(skill);
    self
  }

  pub fn skill(&self) -> Option<&f32> {
    self.skill.as_ref()
  }

  pub fn reset_skill(&mut self) {
    self.skill = None;
  }

  pub fn set_placement(&mut self, placement: i32) {
    self.placement = Some(placement);
  }

  pub fn with_placement(mut self, placement: i32) -> Rank {
    self.placement = Some(placement);
    self
  }

  pub fn placement(&self) -> Option<&i32> {
    self.placement.as_ref()
  }

  pub fn reset_placement(&mut self) {
    self.placement = None;
  }

}



