/* 
 * StrafesNET Public API
 *
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by map id. Sorted in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        List<Time> TimeMapMapIdGet (int? mapId, int? style = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by map id. Sorted in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        ApiResponse<List<Time>> TimeMapMapIdGetWithHttpInfo (int? mapId, int? style = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get WR of map.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Time</returns>
        Time TimeMapMapIdWrGet (int? mapId, int? style);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get WR of map.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>ApiResponse of Time</returns>
        ApiResponse<Time> TimeMapMapIdWrGetWithHttpInfo (int? mapId, int? style);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 50 recent times.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        List<Time> TimeRecentGet (int? date = null, int? style = null, int? game = null, int? map = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 50 recent times.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        ApiResponse<List<Time>> TimeRecentGetWithHttpInfo (int? date = null, int? style = null, int? game = null, int? map = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 10 recent world records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        List<Time> TimeRecentWrGet (int? style, int? game, bool? whitelist = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 10 recent world records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        ApiResponse<List<Time>> TimeRecentWrGetWithHttpInfo (int? style, int? game, bool? whitelist = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Time</returns>
        Time TimeTimeIdGet (int? timeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>ApiResponse of Time</returns>
        ApiResponse<Time> TimeTimeIdGetWithHttpInfo (int? timeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time rank from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Object</returns>
        Object TimeTimeIdRankGet (int? timeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time rank from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TimeTimeIdRankGetWithHttpInfo (int? timeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        List<Time> TimeUserUserIdGet (int? userId, int? map = null, int? style = null, int? game = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        ApiResponse<List<Time>> TimeUserUserIdGetWithHttpInfo (int? userId, int? map = null, int? style = null, int? game = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// World records by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>List&lt;Time&gt;</returns>
        List<Time> TimeUserUserIdWrGet (int? userId, int? game, int? style);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// World records by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        ApiResponse<List<Time>> TimeUserUserIdWrGetWithHttpInfo (int? userId, int? game, int? style);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by map id. Sorted in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        System.Threading.Tasks.Task<List<Time>> TimeMapMapIdGetAsync (int? mapId, int? style = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by map id. Sorted in ascending order.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeMapMapIdGetAsyncWithHttpInfo (int? mapId, int? style = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get WR of map.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of Time</returns>
        System.Threading.Tasks.Task<Time> TimeMapMapIdWrGetAsync (int? mapId, int? style);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get WR of map.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of ApiResponse (Time)</returns>
        System.Threading.Tasks.Task<ApiResponse<Time>> TimeMapMapIdWrGetAsyncWithHttpInfo (int? mapId, int? style);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 50 recent times.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        System.Threading.Tasks.Task<List<Time>> TimeRecentGetAsync (int? date = null, int? style = null, int? game = null, int? map = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 50 recent times.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeRecentGetAsyncWithHttpInfo (int? date = null, int? style = null, int? game = null, int? map = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 10 recent world records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        System.Threading.Tasks.Task<List<Time>> TimeRecentWrGetAsync (int? style, int? game, bool? whitelist = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 10 recent world records.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeRecentWrGetAsyncWithHttpInfo (int? style, int? game, bool? whitelist = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of Time</returns>
        System.Threading.Tasks.Task<Time> TimeTimeIdGetAsync (int? timeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of ApiResponse (Time)</returns>
        System.Threading.Tasks.Task<ApiResponse<Time>> TimeTimeIdGetAsyncWithHttpInfo (int? timeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time rank from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TimeTimeIdRankGetAsync (int? timeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time rank from id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TimeTimeIdRankGetAsyncWithHttpInfo (int? timeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        System.Threading.Tasks.Task<List<Time>> TimeUserUserIdGetAsync (int? userId, int? map = null, int? style = null, int? game = null, int? page = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Time by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeUserUserIdGetAsyncWithHttpInfo (int? userId, int? map = null, int? style = null, int? game = null, int? page = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// World records by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        System.Threading.Tasks.Task<List<Time>> TimeUserUserIdWrGetAsync (int? userId, int? game, int? style);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// World records by user id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeUserUserIdWrGetAsyncWithHttpInfo (int? userId, int? game, int? style);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimeApi : ITimeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimeApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Time by map id. Sorted in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        public List<Time> TimeMapMapIdGet (int? mapId, int? style = null, int? page = null)
        {
             ApiResponse<List<Time>> localVarResponse = TimeMapMapIdGetWithHttpInfo(mapId, style, page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Time by map id. Sorted in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        public ApiResponse< List<Time> > TimeMapMapIdGetWithHttpInfo (int? mapId, int? style = null, int? page = null)
        {
            // verify the required parameter 'mapId' is set
            if (mapId == null)
                throw new ApiException(400, "Missing required parameter 'mapId' when calling TimeApi->TimeMapMapIdGet");

            var localVarPath = "/time/map/{mapId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeMapMapIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  Time by map id. Sorted in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        public async System.Threading.Tasks.Task<List<Time>> TimeMapMapIdGetAsync (int? mapId, int? style = null, int? page = null)
        {
             ApiResponse<List<Time>> localVarResponse = await TimeMapMapIdGetAsyncWithHttpInfo(mapId, style, page);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Time by map id. Sorted in ascending order.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeMapMapIdGetAsyncWithHttpInfo (int? mapId, int? style = null, int? page = null)
        {
            // verify the required parameter 'mapId' is set
            if (mapId == null)
                throw new ApiException(400, "Missing required parameter 'mapId' when calling TimeApi->TimeMapMapIdGet");

            var localVarPath = "/time/map/{mapId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeMapMapIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  Get WR of map.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Time</returns>
        public Time TimeMapMapIdWrGet (int? mapId, int? style)
        {
             ApiResponse<Time> localVarResponse = TimeMapMapIdWrGetWithHttpInfo(mapId, style);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get WR of map.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>ApiResponse of Time</returns>
        public ApiResponse< Time > TimeMapMapIdWrGetWithHttpInfo (int? mapId, int? style)
        {
            // verify the required parameter 'mapId' is set
            if (mapId == null)
                throw new ApiException(400, "Missing required parameter 'mapId' when calling TimeApi->TimeMapMapIdWrGet");
            // verify the required parameter 'style' is set
            if (style == null)
                throw new ApiException(400, "Missing required parameter 'style' when calling TimeApi->TimeMapMapIdWrGet");

            var localVarPath = "/time/map/{mapId}/wr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeMapMapIdWrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Time>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Time) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Time)));
        }

        /// <summary>
        ///  Get WR of map.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of Time</returns>
        public async System.Threading.Tasks.Task<Time> TimeMapMapIdWrGetAsync (int? mapId, int? style)
        {
             ApiResponse<Time> localVarResponse = await TimeMapMapIdWrGetAsyncWithHttpInfo(mapId, style);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get WR of map.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapId">Map ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of ApiResponse (Time)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Time>> TimeMapMapIdWrGetAsyncWithHttpInfo (int? mapId, int? style)
        {
            // verify the required parameter 'mapId' is set
            if (mapId == null)
                throw new ApiException(400, "Missing required parameter 'mapId' when calling TimeApi->TimeMapMapIdWrGet");
            // verify the required parameter 'style' is set
            if (style == null)
                throw new ApiException(400, "Missing required parameter 'style' when calling TimeApi->TimeMapMapIdWrGet");

            var localVarPath = "/time/map/{mapId}/wr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeMapMapIdWrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Time>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Time) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Time)));
        }

        /// <summary>
        ///  50 recent times.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        public List<Time> TimeRecentGet (int? date = null, int? style = null, int? game = null, int? map = null)
        {
             ApiResponse<List<Time>> localVarResponse = TimeRecentGetWithHttpInfo(date, style, game, map);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  50 recent times.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        public ApiResponse< List<Time> > TimeRecentGetWithHttpInfo (int? date = null, int? style = null, int? game = null, int? map = null)
        {

            var localVarPath = "/time/recent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (map != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "map", map)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeRecentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  50 recent times.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        public async System.Threading.Tasks.Task<List<Time>> TimeRecentGetAsync (int? date = null, int? style = null, int? game = null, int? map = null)
        {
             ApiResponse<List<Time>> localVarResponse = await TimeRecentGetAsyncWithHttpInfo(date, style, game, map);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  50 recent times.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Filter out all times before unix time stamp. (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeRecentGetAsyncWithHttpInfo (int? date = null, int? style = null, int? game = null, int? map = null)
        {

            var localVarPath = "/time/recent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (map != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "map", map)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeRecentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  10 recent world records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        public List<Time> TimeRecentWrGet (int? style, int? game, bool? whitelist = null)
        {
             ApiResponse<List<Time>> localVarResponse = TimeRecentWrGetWithHttpInfo(style, game, whitelist);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  10 recent world records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        public ApiResponse< List<Time> > TimeRecentWrGetWithHttpInfo (int? style, int? game, bool? whitelist = null)
        {
            // verify the required parameter 'style' is set
            if (style == null)
                throw new ApiException(400, "Missing required parameter 'style' when calling TimeApi->TimeRecentWrGet");
            // verify the required parameter 'game' is set
            if (game == null)
                throw new ApiException(400, "Missing required parameter 'game' when calling TimeApi->TimeRecentWrGet");

            var localVarPath = "/time/recent/wr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (whitelist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "whitelist", whitelist)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeRecentWrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  10 recent world records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        public async System.Threading.Tasks.Task<List<Time>> TimeRecentWrGetAsync (int? style, int? game, bool? whitelist = null)
        {
             ApiResponse<List<Time>> localVarResponse = await TimeRecentWrGetAsyncWithHttpInfo(style, game, whitelist);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  10 recent world records.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="style">Style ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="whitelist">Filters for only players on the whitelist (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeRecentWrGetAsyncWithHttpInfo (int? style, int? game, bool? whitelist = null)
        {
            // verify the required parameter 'style' is set
            if (style == null)
                throw new ApiException(400, "Missing required parameter 'style' when calling TimeApi->TimeRecentWrGet");
            // verify the required parameter 'game' is set
            if (game == null)
                throw new ApiException(400, "Missing required parameter 'game' when calling TimeApi->TimeRecentWrGet");

            var localVarPath = "/time/recent/wr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (whitelist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "whitelist", whitelist)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeRecentWrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  Time from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Time</returns>
        public Time TimeTimeIdGet (int? timeId)
        {
             ApiResponse<Time> localVarResponse = TimeTimeIdGetWithHttpInfo(timeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Time from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>ApiResponse of Time</returns>
        public ApiResponse< Time > TimeTimeIdGetWithHttpInfo (int? timeId)
        {
            // verify the required parameter 'timeId' is set
            if (timeId == null)
                throw new ApiException(400, "Missing required parameter 'timeId' when calling TimeApi->TimeTimeIdGet");

            var localVarPath = "/time/{timeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeId != null) localVarPathParams.Add("timeId", this.Configuration.ApiClient.ParameterToString(timeId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeTimeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Time>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Time) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Time)));
        }

        /// <summary>
        ///  Time from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of Time</returns>
        public async System.Threading.Tasks.Task<Time> TimeTimeIdGetAsync (int? timeId)
        {
             ApiResponse<Time> localVarResponse = await TimeTimeIdGetAsyncWithHttpInfo(timeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Time from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of ApiResponse (Time)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Time>> TimeTimeIdGetAsyncWithHttpInfo (int? timeId)
        {
            // verify the required parameter 'timeId' is set
            if (timeId == null)
                throw new ApiException(400, "Missing required parameter 'timeId' when calling TimeApi->TimeTimeIdGet");

            var localVarPath = "/time/{timeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeId != null) localVarPathParams.Add("timeId", this.Configuration.ApiClient.ParameterToString(timeId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeTimeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Time>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Time) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Time)));
        }

        /// <summary>
        ///  Time rank from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Object</returns>
        public Object TimeTimeIdRankGet (int? timeId)
        {
             ApiResponse<Object> localVarResponse = TimeTimeIdRankGetWithHttpInfo(timeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Time rank from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TimeTimeIdRankGetWithHttpInfo (int? timeId)
        {
            // verify the required parameter 'timeId' is set
            if (timeId == null)
                throw new ApiException(400, "Missing required parameter 'timeId' when calling TimeApi->TimeTimeIdRankGet");

            var localVarPath = "/time/{timeId}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeId != null) localVarPathParams.Add("timeId", this.Configuration.ApiClient.ParameterToString(timeId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeTimeIdRankGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Time rank from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TimeTimeIdRankGetAsync (int? timeId)
        {
             ApiResponse<Object> localVarResponse = await TimeTimeIdRankGetAsyncWithHttpInfo(timeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Time rank from id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeId">Time ID filter</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TimeTimeIdRankGetAsyncWithHttpInfo (int? timeId)
        {
            // verify the required parameter 'timeId' is set
            if (timeId == null)
                throw new ApiException(400, "Missing required parameter 'timeId' when calling TimeApi->TimeTimeIdRankGet");

            var localVarPath = "/time/{timeId}/rank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeId != null) localVarPathParams.Add("timeId", this.Configuration.ApiClient.ParameterToString(timeId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeTimeIdRankGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Time by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>List&lt;Time&gt;</returns>
        public List<Time> TimeUserUserIdGet (int? userId, int? map = null, int? style = null, int? game = null, int? page = null)
        {
             ApiResponse<List<Time>> localVarResponse = TimeUserUserIdGetWithHttpInfo(userId, map, style, game, page);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Time by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        public ApiResponse< List<Time> > TimeUserUserIdGetWithHttpInfo (int? userId, int? map = null, int? style = null, int? game = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TimeApi->TimeUserUserIdGet");

            var localVarPath = "/time/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (map != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "map", map)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUserUserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  Time by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        public async System.Threading.Tasks.Task<List<Time>> TimeUserUserIdGetAsync (int? userId, int? map = null, int? style = null, int? game = null, int? page = null)
        {
             ApiResponse<List<Time>> localVarResponse = await TimeUserUserIdGetAsyncWithHttpInfo(userId, map, style, game, page);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Time by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="map">Map ID filter (optional)</param>
        /// <param name="style">Style ID filter (optional)</param>
        /// <param name="game">Game ID filter (optional)</param>
        /// <param name="page">Page api results. Page size is 200. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeUserUserIdGetAsyncWithHttpInfo (int? userId, int? map = null, int? style = null, int? game = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TimeApi->TimeUserUserIdGet");

            var localVarPath = "/time/user/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (map != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "map", map)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUserUserIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  World records by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>List&lt;Time&gt;</returns>
        public List<Time> TimeUserUserIdWrGet (int? userId, int? game, int? style)
        {
             ApiResponse<List<Time>> localVarResponse = TimeUserUserIdWrGetWithHttpInfo(userId, game, style);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  World records by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>ApiResponse of List&lt;Time&gt;</returns>
        public ApiResponse< List<Time> > TimeUserUserIdWrGetWithHttpInfo (int? userId, int? game, int? style)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TimeApi->TimeUserUserIdWrGet");
            // verify the required parameter 'game' is set
            if (game == null)
                throw new ApiException(400, "Missing required parameter 'game' when calling TimeApi->TimeUserUserIdWrGet");
            // verify the required parameter 'style' is set
            if (style == null)
                throw new ApiException(400, "Missing required parameter 'style' when calling TimeApi->TimeUserUserIdWrGet");

            var localVarPath = "/time/user/{userId}/wr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUserUserIdWrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

        /// <summary>
        ///  World records by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of List&lt;Time&gt;</returns>
        public async System.Threading.Tasks.Task<List<Time>> TimeUserUserIdWrGetAsync (int? userId, int? game, int? style)
        {
             ApiResponse<List<Time>> localVarResponse = await TimeUserUserIdWrGetAsyncWithHttpInfo(userId, game, style);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  World records by user id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID filter</param>
        /// <param name="game">Game ID filter</param>
        /// <param name="style">Style ID filter</param>
        /// <returns>Task of ApiResponse (List&lt;Time&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Time>>> TimeUserUserIdWrGetAsyncWithHttpInfo (int? userId, int? game, int? style)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TimeApi->TimeUserUserIdWrGet");
            // verify the required parameter 'game' is set
            if (game == null)
                throw new ApiException(400, "Missing required parameter 'game' when calling TimeApi->TimeUserUserIdWrGet");
            // verify the required parameter 'style' is set
            if (style == null)
                throw new ApiException(400, "Missing required parameter 'style' when calling TimeApi->TimeUserUserIdWrGet");

            var localVarPath = "/time/user/{userId}/wr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (game != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "game", game)); // query parameter
            if (style != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "style", style)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUserUserIdWrGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Time>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Time>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Time>)));
        }

    }
}
