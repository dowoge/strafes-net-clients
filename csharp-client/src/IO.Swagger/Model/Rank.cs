/* 
 * StrafesNET Public API
 *
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Rank
    /// </summary>
    [DataContract]
    public partial class Rank :  IEquatable<Rank>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rank" /> class.
        /// </summary>
        /// <param name="iD">iD.</param>
        /// <param name="user">user.</param>
        /// <param name="style">style.</param>
        /// <param name="mode">mode.</param>
        /// <param name="game">game.</param>
        /// <param name="rank">rank.</param>
        /// <param name="skill">skill.</param>
        /// <param name="placement">placement.</param>
        public Rank(int? iD = default(int?), int? user = default(int?), int? style = default(int?), int? mode = default(int?), int? game = default(int?), decimal? rank = default(decimal?), decimal? skill = default(decimal?), int? placement = default(int?))
        {
            this.ID = iD;
            this.User = user;
            this.Style = style;
            this.Mode = mode;
            this.Game = game;
            this._Rank = rank;
            this.Skill = skill;
            this.Placement = placement;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="User", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="Style", EmitDefaultValue=false)]
        public int? Style { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="Mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// Gets or Sets Game
        /// </summary>
        [DataMember(Name="Game", EmitDefaultValue=false)]
        public int? Game { get; set; }

        /// <summary>
        /// Gets or Sets _Rank
        /// </summary>
        [DataMember(Name="Rank", EmitDefaultValue=false)]
        public decimal? _Rank { get; set; }

        /// <summary>
        /// Gets or Sets Skill
        /// </summary>
        [DataMember(Name="Skill", EmitDefaultValue=false)]
        public decimal? Skill { get; set; }

        /// <summary>
        /// Gets or Sets Placement
        /// </summary>
        [DataMember(Name="Placement", EmitDefaultValue=false)]
        public int? Placement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rank {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Game: ").Append(Game).Append("\n");
            sb.Append("  _Rank: ").Append(_Rank).Append("\n");
            sb.Append("  Skill: ").Append(Skill).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rank);
        }

        /// <summary>
        /// Returns true if Rank instances are equal
        /// </summary>
        /// <param name="input">Instance of Rank to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rank input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Game == input.Game ||
                    (this.Game != null &&
                    this.Game.Equals(input.Game))
                ) && 
                (
                    this._Rank == input._Rank ||
                    (this._Rank != null &&
                    this._Rank.Equals(input._Rank))
                ) && 
                (
                    this.Skill == input.Skill ||
                    (this.Skill != null &&
                    this.Skill.Equals(input.Skill))
                ) && 
                (
                    this.Placement == input.Placement ||
                    (this.Placement != null &&
                    this.Placement.Equals(input.Placement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Game != null)
                    hashCode = hashCode * 59 + this.Game.GetHashCode();
                if (this._Rank != null)
                    hashCode = hashCode * 59 + this._Rank.GetHashCode();
                if (this.Skill != null)
                    hashCode = hashCode * 59 + this.Skill.GetHashCode();
                if (this.Placement != null)
                    hashCode = hashCode * 59 + this.Placement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
