/* 
 * StrafesNET Public API
 *
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TimeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TimeApiTests
    {
        private TimeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TimeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TimeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TimeApi
            //Assert.IsInstanceOfType(typeof(TimeApi), instance, "instance is a TimeApi");
        }

        
        /// <summary>
        /// Test TimeMapMapIdGet
        /// </summary>
        [Test]
        public void TimeMapMapIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? mapId = null;
            //int? style = null;
            //int? page = null;
            //var response = instance.TimeMapMapIdGet(mapId, style, page);
            //Assert.IsInstanceOf<List<Time>> (response, "response is List<Time>");
        }
        
        /// <summary>
        /// Test TimeMapMapIdWrGet
        /// </summary>
        [Test]
        public void TimeMapMapIdWrGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? mapId = null;
            //int? style = null;
            //var response = instance.TimeMapMapIdWrGet(mapId, style);
            //Assert.IsInstanceOf<Time> (response, "response is Time");
        }
        
        /// <summary>
        /// Test TimeRecentGet
        /// </summary>
        [Test]
        public void TimeRecentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? date = null;
            //int? style = null;
            //int? game = null;
            //int? map = null;
            //var response = instance.TimeRecentGet(date, style, game, map);
            //Assert.IsInstanceOf<List<Time>> (response, "response is List<Time>");
        }
        
        /// <summary>
        /// Test TimeRecentWrGet
        /// </summary>
        [Test]
        public void TimeRecentWrGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? style = null;
            //int? game = null;
            //bool? whitelist = null;
            //var response = instance.TimeRecentWrGet(style, game, whitelist);
            //Assert.IsInstanceOf<List<Time>> (response, "response is List<Time>");
        }
        
        /// <summary>
        /// Test TimeTimeIdGet
        /// </summary>
        [Test]
        public void TimeTimeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? timeId = null;
            //var response = instance.TimeTimeIdGet(timeId);
            //Assert.IsInstanceOf<Time> (response, "response is Time");
        }
        
        /// <summary>
        /// Test TimeTimeIdRankGet
        /// </summary>
        [Test]
        public void TimeTimeIdRankGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? timeId = null;
            //var response = instance.TimeTimeIdRankGet(timeId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TimeUserUserIdGet
        /// </summary>
        [Test]
        public void TimeUserUserIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? map = null;
            //int? style = null;
            //int? game = null;
            //int? page = null;
            //var response = instance.TimeUserUserIdGet(userId, map, style, game, page);
            //Assert.IsInstanceOf<List<Time>> (response, "response is List<Time>");
        }
        
        /// <summary>
        /// Test TimeUserUserIdWrGet
        /// </summary>
        [Test]
        public void TimeUserUserIdWrGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? game = null;
            //int? style = null;
            //var response = instance.TimeUserUserIdWrGet(userId, game, style);
            //Assert.IsInstanceOf<List<Time>> (response, "response is List<Time>");
        }
        
    }

}
