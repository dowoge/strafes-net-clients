/*
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StrafesNetPublicApi);
  }
}(this, function(expect, StrafesNetPublicApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StrafesNetPublicApi.TimeApi();
  });

  describe('(package)', function() {
    describe('TimeApi', function() {
      describe('timeMapMapIdGet', function() {
        it('should call timeMapMapIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeMapMapIdGet call and complete the assertions
          /*
          var mapId = 56;
          var opts = {};
          opts.style = 56;
          opts.page = 56;

          instance.timeMapMapIdGet(mapId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StrafesNetPublicApi.Time);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.time).to.be.a('number');
              expect(data.time).to.be(0);
              expect(data.user).to.be.a('number');
              expect(data.user).to.be(0);
              expect(data.map).to.be.a('number');
              expect(data.map).to.be(0);
              expect(data._date).to.be.a('number');
              expect(data._date).to.be(0);
              expect(data.style).to.be.a('number');
              expect(data.style).to.be(0);
              expect(data.mode).to.be.a('number');
              expect(data.mode).to.be(0);
              expect(data.game).to.be.a('number');
              expect(data.game).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeMapMapIdWrGet', function() {
        it('should call timeMapMapIdWrGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeMapMapIdWrGet call and complete the assertions
          /*
          var mapId = 56;
          var style = 56;

          instance.timeMapMapIdWrGet(mapId, style, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StrafesNetPublicApi.Time);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.time).to.be.a('number');
            expect(data.time).to.be(0);
            expect(data.user).to.be.a('number');
            expect(data.user).to.be(0);
            expect(data.map).to.be.a('number');
            expect(data.map).to.be(0);
            expect(data._date).to.be.a('number');
            expect(data._date).to.be(0);
            expect(data.style).to.be.a('number');
            expect(data.style).to.be(0);
            expect(data.mode).to.be.a('number');
            expect(data.mode).to.be(0);
            expect(data.game).to.be.a('number');
            expect(data.game).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeRecentGet', function() {
        it('should call timeRecentGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeRecentGet call and complete the assertions
          /*
          var opts = {};
          opts._date = 56;
          opts.style = 56;
          opts.game = 56;
          opts.map = 56;

          instance.timeRecentGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StrafesNetPublicApi.Time);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.time).to.be.a('number');
              expect(data.time).to.be(0);
              expect(data.user).to.be.a('number');
              expect(data.user).to.be(0);
              expect(data.map).to.be.a('number');
              expect(data.map).to.be(0);
              expect(data._date).to.be.a('number');
              expect(data._date).to.be(0);
              expect(data.style).to.be.a('number');
              expect(data.style).to.be(0);
              expect(data.mode).to.be.a('number');
              expect(data.mode).to.be(0);
              expect(data.game).to.be.a('number');
              expect(data.game).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeRecentWrGet', function() {
        it('should call timeRecentWrGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeRecentWrGet call and complete the assertions
          /*
          var style = 56;
          var game = 56;
          var opts = {};
          opts.whitelist = true;

          instance.timeRecentWrGet(style, game, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StrafesNetPublicApi.Time);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.time).to.be.a('number');
              expect(data.time).to.be(0);
              expect(data.user).to.be.a('number');
              expect(data.user).to.be(0);
              expect(data.map).to.be.a('number');
              expect(data.map).to.be(0);
              expect(data._date).to.be.a('number');
              expect(data._date).to.be(0);
              expect(data.style).to.be.a('number');
              expect(data.style).to.be(0);
              expect(data.mode).to.be.a('number');
              expect(data.mode).to.be(0);
              expect(data.game).to.be.a('number');
              expect(data.game).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeTimeIdGet', function() {
        it('should call timeTimeIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeTimeIdGet call and complete the assertions
          /*
          var timeId = 56;

          instance.timeTimeIdGet(timeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StrafesNetPublicApi.Time);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.time).to.be.a('number');
            expect(data.time).to.be(0);
            expect(data.user).to.be.a('number');
            expect(data.user).to.be(0);
            expect(data.map).to.be.a('number');
            expect(data.map).to.be(0);
            expect(data._date).to.be.a('number');
            expect(data._date).to.be(0);
            expect(data.style).to.be.a('number');
            expect(data.style).to.be(0);
            expect(data.mode).to.be.a('number');
            expect(data.mode).to.be(0);
            expect(data.game).to.be.a('number');
            expect(data.game).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeTimeIdRankGet', function() {
        it('should call timeTimeIdRankGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeTimeIdRankGet call and complete the assertions
          /*
          var timeId = 56;

          instance.timeTimeIdRankGet(timeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeUserUserIdGet', function() {
        it('should call timeUserUserIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeUserUserIdGet call and complete the assertions
          /*
          var userId = 56;
          var opts = {};
          opts.map = 56;
          opts.style = 56;
          opts.game = 56;
          opts.page = 56;

          instance.timeUserUserIdGet(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StrafesNetPublicApi.Time);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.time).to.be.a('number');
              expect(data.time).to.be(0);
              expect(data.user).to.be.a('number');
              expect(data.user).to.be(0);
              expect(data.map).to.be.a('number');
              expect(data.map).to.be(0);
              expect(data._date).to.be.a('number');
              expect(data._date).to.be(0);
              expect(data.style).to.be.a('number');
              expect(data.style).to.be(0);
              expect(data.mode).to.be.a('number');
              expect(data.mode).to.be(0);
              expect(data.game).to.be.a('number');
              expect(data.game).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeUserUserIdWrGet', function() {
        it('should call timeUserUserIdWrGet successfully', function(done) {
          // TODO: uncomment, update parameter values for timeUserUserIdWrGet call and complete the assertions
          /*
          var userId = 56;
          var game = 56;
          var style = 56;

          instance.timeUserUserIdWrGet(userId, game, style, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StrafesNetPublicApi.Time);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.time).to.be.a('number');
              expect(data.time).to.be(0);
              expect(data.user).to.be.a('number');
              expect(data.user).to.be(0);
              expect(data.map).to.be.a('number');
              expect(data.map).to.be(0);
              expect(data._date).to.be.a('number');
              expect(data._date).to.be(0);
              expect(data.style).to.be.a('number');
              expect(data.style).to.be(0);
              expect(data.mode).to.be.a('number');
              expect(data.mode).to.be(0);
              expect(data.game).to.be.a('number');
              expect(data.game).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
