/*
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Time'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Time'));
  } else {
    // Browser globals (root is window)
    if (!root.StrafesNetPublicApi) {
      root.StrafesNetPublicApi = {};
    }
    root.StrafesNetPublicApi.TimeApi = factory(root.StrafesNetPublicApi.ApiClient, root.StrafesNetPublicApi.Time);
  }
}(this, function(ApiClient, Time) {
  'use strict';

  /**
   * Time service.
   * @module api/TimeApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TimeApi. 
   * @alias module:api/TimeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the timeMapMapIdGet operation.
     * @callback module:api/TimeApi~timeMapMapIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Time>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Time by map id. Sorted in ascending order.
     * @param {Number} mapId Map ID filter
     * @param {Object} opts Optional parameters
     * @param {Number} opts.style Style ID filter
     * @param {Number} opts.page Page api results. Page size is 200.
     * @param {module:api/TimeApi~timeMapMapIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Time>}
     */
    this.timeMapMapIdGet = function(mapId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling timeMapMapIdGet");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
        'style': opts['style'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Time];

      return this.apiClient.callApi(
        '/time/map/{mapId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeMapMapIdWrGet operation.
     * @callback module:api/TimeApi~timeMapMapIdWrGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Time} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WR of map.
     * @param {Number} mapId Map ID filter
     * @param {Number} style Style ID filter
     * @param {module:api/TimeApi~timeMapMapIdWrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Time}
     */
    this.timeMapMapIdWrGet = function(mapId, style, callback) {
      var postBody = null;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling timeMapMapIdWrGet");
      }

      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling timeMapMapIdWrGet");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
        'style': style,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Time;

      return this.apiClient.callApi(
        '/time/map/{mapId}/wr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeRecentGet operation.
     * @callback module:api/TimeApi~timeRecentGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Time>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 50 recent times.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._date Filter out all times before unix time stamp.
     * @param {Number} opts.style Style ID filter
     * @param {Number} opts.game Game ID filter
     * @param {Number} opts.map Map ID filter
     * @param {module:api/TimeApi~timeRecentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Time>}
     */
    this.timeRecentGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'date': opts['_date'],
        'style': opts['style'],
        'game': opts['game'],
        'map': opts['map'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Time];

      return this.apiClient.callApi(
        '/time/recent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeRecentWrGet operation.
     * @callback module:api/TimeApi~timeRecentWrGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Time>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 10 recent world records.
     * @param {Number} style Style ID filter
     * @param {Number} game Game ID filter
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.whitelist Filters for only players on the whitelist
     * @param {module:api/TimeApi~timeRecentWrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Time>}
     */
    this.timeRecentWrGet = function(style, game, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling timeRecentWrGet");
      }

      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling timeRecentWrGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'style': style,
        'game': game,
        'whitelist': opts['whitelist'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Time];

      return this.apiClient.callApi(
        '/time/recent/wr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeTimeIdGet operation.
     * @callback module:api/TimeApi~timeTimeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Time} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Time from id.
     * @param {Number} timeId Time ID filter
     * @param {module:api/TimeApi~timeTimeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Time}
     */
    this.timeTimeIdGet = function(timeId, callback) {
      var postBody = null;

      // verify the required parameter 'timeId' is set
      if (timeId === undefined || timeId === null) {
        throw new Error("Missing the required parameter 'timeId' when calling timeTimeIdGet");
      }


      var pathParams = {
        'timeId': timeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Time;

      return this.apiClient.callApi(
        '/time/{timeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeTimeIdRankGet operation.
     * @callback module:api/TimeApi~timeTimeIdRankGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Time rank from id.
     * @param {Number} timeId Time ID filter
     * @param {module:api/TimeApi~timeTimeIdRankGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeTimeIdRankGet = function(timeId, callback) {
      var postBody = null;

      // verify the required parameter 'timeId' is set
      if (timeId === undefined || timeId === null) {
        throw new Error("Missing the required parameter 'timeId' when calling timeTimeIdRankGet");
      }


      var pathParams = {
        'timeId': timeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/time/{timeId}/rank', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeUserUserIdGet operation.
     * @callback module:api/TimeApi~timeUserUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Time>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Time by user id.
     * @param {Number} userId User ID filter
     * @param {Object} opts Optional parameters
     * @param {Number} opts.map Map ID filter
     * @param {Number} opts.style Style ID filter
     * @param {Number} opts.game Game ID filter
     * @param {Number} opts.page Page api results. Page size is 200.
     * @param {module:api/TimeApi~timeUserUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Time>}
     */
    this.timeUserUserIdGet = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling timeUserUserIdGet");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'map': opts['map'],
        'style': opts['style'],
        'game': opts['game'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Time];

      return this.apiClient.callApi(
        '/time/user/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeUserUserIdWrGet operation.
     * @callback module:api/TimeApi~timeUserUserIdWrGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Time>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * World records by user id.
     * @param {Number} userId User ID filter
     * @param {Number} game Game ID filter
     * @param {Number} style Style ID filter
     * @param {module:api/TimeApi~timeUserUserIdWrGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Time>}
     */
    this.timeUserUserIdWrGet = function(userId, game, style, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling timeUserUserIdWrGet");
      }

      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling timeUserUserIdWrGet");
      }

      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling timeUserUserIdWrGet");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'game': game,
        'style': style,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Time];

      return this.apiClient.callApi(
        '/time/user/{userId}/wr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
