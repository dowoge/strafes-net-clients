/*
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Rank'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Rank'));
  } else {
    // Browser globals (root is window)
    if (!root.StrafesNetPublicApi) {
      root.StrafesNetPublicApi = {};
    }
    root.StrafesNetPublicApi.RankApi = factory(root.StrafesNetPublicApi.ApiClient, root.StrafesNetPublicApi.Rank);
  }
}(this, function(ApiClient, Rank) {
  'use strict';

  /**
   * Rank service.
   * @module api/RankApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RankApi. 
   * @alias module:api/RankApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the rankGet operation.
     * @callback module:api/RankApi~rankGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rank>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top ranked players, paged at 50 per page.
     * @param {Number} style Style ID filter
     * @param {Number} game Game ID filter
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page api results, Page size is 50.
     * @param {module:api/RankApi~rankGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rank>}
     */
    this.rankGet = function(style, game, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling rankGet");
      }

      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling rankGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'style': style,
        'game': game,
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Rank];

      return this.apiClient.callApi(
        '/rank', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rankUserIdGet operation.
     * @callback module:api/RankApi~rankUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rank} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rank of user by their id.
     * @param {Number} userId User ID filter
     * @param {Number} style Style ID filter
     * @param {Number} game Game ID filter
     * @param {module:api/RankApi~rankUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rank}
     */
    this.rankUserIdGet = function(userId, style, game, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling rankUserIdGet");
      }

      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling rankUserIdGet");
      }

      // verify the required parameter 'game' is set
      if (game === undefined || game === null) {
        throw new Error("Missing the required parameter 'game' when calling rankUserIdGet");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'style': style,
        'game': game,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Rank;

      return this.apiClient.callApi(
        '/rank/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
