/**
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.21.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Map.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Map_H_
#define IO_SWAGGER_CLIENT_MODEL_Map_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Map
    : public ModelBase
{
public:
    Map();
    virtual ~Map();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Map members

    /// <summary>
    /// 
    /// </summary>
    int32_t getID() const;
    bool iDIsSet() const;
    void unsetID();
    void setID(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();
    void setDisplayName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreator() const;
    bool creatorIsSet() const;
    void unsetCreator();
    void setCreator(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getGame() const;
    bool gameIsSet() const;
    void unsetGame();
    void setGame(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getDate() const;
    bool dateIsSet() const;
    void unsetDate();
    void setDate(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getPlayCount() const;
    bool playCountIsSet() const;
    void unsetPlayCount();
    void setPlayCount(int32_t value);

protected:
    int32_t m_ID;
    bool m_IDIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    utility::string_t m_Creator;
    bool m_CreatorIsSet;
    int32_t m_Game;
    bool m_GameIsSet;
    int32_t m_Date;
    bool m_DateIsSet;
    int32_t m_PlayCount;
    bool m_PlayCountIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Map_H_ */
