/**
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.21.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Rank.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Rank_H_
#define IO_SWAGGER_CLIENT_MODEL_Rank_H_


#include "../ModelBase.h"


namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Rank
    : public ModelBase
{
public:
    Rank();
    virtual ~Rank();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Rank members

    /// <summary>
    /// 
    /// </summary>
    int32_t getID() const;
    bool iDIsSet() const;
    void unsetID();
    void setID(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getUser() const;
    bool userIsSet() const;
    void unsetUser();
    void setUser(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getStyle() const;
    bool styleIsSet() const;
    void unsetStyle();
    void setStyle(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getMode() const;
    bool modeIsSet() const;
    void unsetMode();
    void setMode(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getGame() const;
    bool gameIsSet() const;
    void unsetGame();
    void setGame(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    double getRank() const;
    bool rankIsSet() const;
    void unsetRank();
    void setRank(double value);
    /// <summary>
    /// 
    /// </summary>
    double getSkill() const;
    bool skillIsSet() const;
    void unsetSkill();
    void setSkill(double value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getPlacement() const;
    bool placementIsSet() const;
    void unsetPlacement();
    void setPlacement(int32_t value);

protected:
    int32_t m_ID;
    bool m_IDIsSet;
    int32_t m_User;
    bool m_UserIsSet;
    int32_t m_Style;
    bool m_StyleIsSet;
    int32_t m_Mode;
    bool m_ModeIsSet;
    int32_t m_Game;
    bool m_GameIsSet;
    double m_Rank;
    bool m_RankIsSet;
    double m_Skill;
    bool m_SkillIsSet;
    int32_t m_Placement;
    bool m_PlacementIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Rank_H_ */
