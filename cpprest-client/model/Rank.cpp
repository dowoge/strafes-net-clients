/**
 * StrafesNET Public API
 * ### How to use To request an api key open a support request in the [issue tracker](https://issues.strafes.net/client/index.php#/types/3/issues).  ### Default API request rate limits are as follows * 100 requests per minute * 3000 requests per hour  ### Game IDs ``` 1 Bhop 2 Surf ``` ### Style IDs ``` 1 Autohop 2 Scroll 3 Sideways 4 Half-Sideways 5 W-Only 6 A-Only 7 Backwards ``` 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.21.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Rank.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Rank::Rank()
{
    m_ID = 0;
    m_IDIsSet = false;
    m_User = 0;
    m_UserIsSet = false;
    m_Style = 0;
    m_StyleIsSet = false;
    m_Mode = 0;
    m_ModeIsSet = false;
    m_Game = 0;
    m_GameIsSet = false;
    m_Rank = 0.0;
    m_RankIsSet = false;
    m_Skill = 0.0;
    m_SkillIsSet = false;
    m_Placement = 0;
    m_PlacementIsSet = false;
}

Rank::~Rank()
{
}

void Rank::validate()
{
    // TODO: implement validation
}

web::json::value Rank::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IDIsSet)
    {
        val[utility::conversions::to_string_t("ID")] = ModelBase::toJson(m_ID);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("User")] = ModelBase::toJson(m_User);
    }
    if(m_StyleIsSet)
    {
        val[utility::conversions::to_string_t("Style")] = ModelBase::toJson(m_Style);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t("Mode")] = ModelBase::toJson(m_Mode);
    }
    if(m_GameIsSet)
    {
        val[utility::conversions::to_string_t("Game")] = ModelBase::toJson(m_Game);
    }
    if(m_RankIsSet)
    {
        val[utility::conversions::to_string_t("Rank")] = ModelBase::toJson(m_Rank);
    }
    if(m_SkillIsSet)
    {
        val[utility::conversions::to_string_t("Skill")] = ModelBase::toJson(m_Skill);
    }
    if(m_PlacementIsSet)
    {
        val[utility::conversions::to_string_t("Placement")] = ModelBase::toJson(m_Placement);
    }

    return val;
}

void Rank::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ID")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ID")];
        if(!fieldValue.is_null())
        {
            setID(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("User")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("User")];
        if(!fieldValue.is_null())
        {
            setUser(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Style")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Style")];
        if(!fieldValue.is_null())
        {
            setStyle(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Mode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Mode")];
        if(!fieldValue.is_null())
        {
            setMode(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Game")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Game")];
        if(!fieldValue.is_null())
        {
            setGame(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Rank")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Rank")];
        if(!fieldValue.is_null())
        {
            setRank(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Skill")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Skill")];
        if(!fieldValue.is_null())
        {
            setSkill(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Placement")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Placement")];
        if(!fieldValue.is_null())
        {
            setPlacement(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Rank::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ID"), m_ID));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("User"), m_User));
    }
    if(m_StyleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Style"), m_Style));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Mode"), m_Mode));
    }
    if(m_GameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Game"), m_Game));
    }
    if(m_RankIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Rank"), m_Rank));
    }
    if(m_SkillIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Skill"), m_Skill));
    }
    if(m_PlacementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Placement"), m_Placement));
    }
}

void Rank::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ID")))
    {
        setID(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ID"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("User")))
    {
        setUser(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("User"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Style")))
    {
        setStyle(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Style"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Mode")))
    {
        setMode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Mode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Game")))
    {
        setGame(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Game"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Rank")))
    {
        setRank(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Rank"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Skill")))
    {
        setSkill(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Skill"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Placement")))
    {
        setPlacement(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Placement"))));
    }
}

int32_t Rank::getID() const
{
    return m_ID;
}


void Rank::setID(int32_t value)
{
    m_ID = value;
    m_IDIsSet = true;
}
bool Rank::iDIsSet() const
{
    return m_IDIsSet;
}

void Rank::unsetID()
{
    m_IDIsSet = false;
}

int32_t Rank::getUser() const
{
    return m_User;
}


void Rank::setUser(int32_t value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool Rank::userIsSet() const
{
    return m_UserIsSet;
}

void Rank::unsetUser()
{
    m_UserIsSet = false;
}

int32_t Rank::getStyle() const
{
    return m_Style;
}


void Rank::setStyle(int32_t value)
{
    m_Style = value;
    m_StyleIsSet = true;
}
bool Rank::styleIsSet() const
{
    return m_StyleIsSet;
}

void Rank::unsetStyle()
{
    m_StyleIsSet = false;
}

int32_t Rank::getMode() const
{
    return m_Mode;
}


void Rank::setMode(int32_t value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}
bool Rank::modeIsSet() const
{
    return m_ModeIsSet;
}

void Rank::unsetMode()
{
    m_ModeIsSet = false;
}

int32_t Rank::getGame() const
{
    return m_Game;
}


void Rank::setGame(int32_t value)
{
    m_Game = value;
    m_GameIsSet = true;
}
bool Rank::gameIsSet() const
{
    return m_GameIsSet;
}

void Rank::unsetGame()
{
    m_GameIsSet = false;
}

double Rank::getRank() const
{
    return m_Rank;
}


void Rank::setRank(double value)
{
    m_Rank = value;
    m_RankIsSet = true;
}
bool Rank::rankIsSet() const
{
    return m_RankIsSet;
}

void Rank::unsetRank()
{
    m_RankIsSet = false;
}

double Rank::getSkill() const
{
    return m_Skill;
}


void Rank::setSkill(double value)
{
    m_Skill = value;
    m_SkillIsSet = true;
}
bool Rank::skillIsSet() const
{
    return m_SkillIsSet;
}

void Rank::unsetSkill()
{
    m_SkillIsSet = false;
}

int32_t Rank::getPlacement() const
{
    return m_Placement;
}


void Rank::setPlacement(int32_t value)
{
    m_Placement = value;
    m_PlacementIsSet = true;
}
bool Rank::placementIsSet() const
{
    return m_PlacementIsSet;
}

void Rank::unsetPlacement()
{
    m_PlacementIsSet = false;
}

}
}
}
}

